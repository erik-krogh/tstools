###underscore
FIXED: underscore-tests.ts(5,1): error TS2346: Supplied parameters do not match any signature of call target.
_.each( [1, 2, 3], (num) => alert(num.toString()) );

static each: (obj: any, 
iteratee: (accumulator: any, index: any, collection: any, collection1: any, arg4: any) => any, 
context: any) => any;

/**
	* Iterates over a list of elements, yielding each in turn to an iterator function. The iterator is
	* bound to the context object, if one is passed. Each invocation of iterator is called with three
	* arguments: (element, index, list). If list is a JavaScript object, iterator's arguments will be
	* (value, key, object). Delegates to the native forEach function if it exists.
	* @param list Iterates over this list of elements.
	* @param iterator Iterator function for each element `list`.
	* @param context 'this' object in `iterator`, optional.
	**/
	each<T>(
		list: _.List<T>,
		iterator: _.ListIterator<T, void>,
		context?: any): _.List<T>;

	/**
	* @see _.each
	* @param object Iterates over properties of this object.
	* @param iterator Iterator function for each property on `object`.
	* @param context 'this' object in `iterator`, optional.
	**/
	each<T>(
		object: _.Dictionary<T>,
		iterator: _.ObjectIterator<T, void>,
		context?: any): _.Dictionary<T>;

	/**
=======================
_.map([1, 2, 3], (num) => num * 3);
static map: (obj: interface_212, iteratee: (arg0: any, arg1: number, arg2: interface_211) => any, context: any) => interface_214;

* object, iterator's arguments will be (value, key, object).
	* @param list Maps the elements of this array.
	* @param iterator Map iterator function for each element in `list`.
	* @param context `this` object in `iterator`, optional.
	* @return The mapped array result.
	**/
	map<T, TResult>(
		list: _.List<T>,
		iterator: _.ListIterator<T, TResult>,
		context?: any): TResult[];

	/**
	* @see _.map
	* @param object Maps the properties of this object.
	* @param iterator Map iterator function for each property on `object`.
	* @param context `this` object in `iterator`, optional.
	* @return The mapped object result.
	**/
	map<T, TResult>(
		object: _.Dictionary<T>,
		iterator: _.ObjectIterator<T, TResult>,
		context?: any): TResult[];



========================
_ as namespace?
_ as function?
========================
underscore-tests.ts(14,7): error TS2346: Supplied parameters do not match any signature of call target.
sum = _.reduce<string, number>({'a':'1', 'b':'2', 'c':'3'}, (memo, numstr) => memo + (+numstr));

Optional parameters?

static reduce: (obj: interface_235, iteratee: any, memo: any, context: any) => any;

/**
	* Also known as inject and foldl, reduce boils down a list of values into a single value.
	* Memo is the initial state of the reduction, and each successive step of it should be
	* returned by iterator. The iterator is passed four arguments: the memo, then the value
	* and index (or key) of the iteration, and finally a reference to the entire list.
	* @param list Reduces the elements of this array.
	* @param iterator Reduce iterator function for each element in `list`.
	* @param memo Initial reduce state.
	* @param context `this` object in `iterator`, optional.
	* @return Reduced object result.
	**/
	reduce<T, TResult>(
		list: _.Collection<T>,
		iterator: _.MemoIterator<T, TResult>,
		memo?: TResult,
		context?: any): TResult;

	reduce<T, TResult>(
		list: _.Dictionary<T>,
		iterator: _.MemoObjectIterator<T, TResult>,
		memo?: TResult,
		context?: any): TResult;
=============================
Supplied parameters do not match any signature of call target
detect, find, filter, reject, every, any, some, invoke
shuffle is correct

###pixi
hamid@victoria:/all/projs/DefinitelyTyped/pixi.js$ tsc pixi.js.gen.d.ts 
pixi.js.gen.d.ts(190932,5): error TS2411: Property 'hasOwnProperty' of type '(arg0: string | number) => any' is not assignable to string index type 'interface_696'.
===================================
pixi.js.gen.d.ts(191182,5): error TS2411: Property 'emit' of type '(arg0: string | number, arg1: interface_646) => void' is not assignable to string index type '(arg0: interface_646) => void'.

pixi.js.gen.d.ts(191187,5): error TS2411: Property 'emit' of type '(arg0: string | number, arg1: interface_646) => void' is not assignable to string index type '(arg0: interface_646) => void'.

We should be careful when we have [s: string]:<type> in the interface since this indexing applies to any prperty in the object. The most precise way to handle this is to redeclare as [s: string]:<type1>|<type2>|<type3> for all possible types. See pixi.js.gen.d.ts.fixed-attention

